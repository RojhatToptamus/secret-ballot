import { HardhatRuntimeEnvironment } from "hardhat/types";
import { DeployFunction } from "hardhat-deploy/types";
import { Contract } from "ethers";

/**
 * Deploys a contract named "YourContract" using the deployer account and
 * constructor arguments set to the deployer address
 *
 * @param hre HardhatRuntimeEnvironment object.
 */
const deployYourContract: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
  /*
    On localhost, the deployer account is the one that comes with Hardhat, which is already funded.

    When deploying to live networks (e.g `yarn deploy --network sepolia`), the deployer account
    should have sufficient balance to pay for the gas fees for contract creation.

    You can generate a random account with `yarn generate` or `yarn account:import` to import your
    existing PK which will fill DEPLOYER_PRIVATE_KEY_ENCRYPTED in the .env file (then used on hardhat.config.ts)
    You can run the `yarn account` command to check your balance in every network.
  */
  const { deployer } = await hre.getNamedAccounts();
  const { deploy } = hre.deployments;

  await deploy("UltraVerifier", {
    from: deployer,
    // Contract constructor arguments
    args: [],
    log: true,
    // autoMine: can be passed to the deploy function to make the deployment process faster on local networks by
    // automatically mining the contract deployment transaction. There is no effect on live networks.
    autoMine: true,
  });

  // Get the deployed contract to interact with it after deploying.
  const yourContract = await hre.ethers.getContract<Contract>("UltraVerifier", deployer);
  const hex_proof =
    "0x22d03dfe27c8483e548e8bd47fe2ff811e5ce663e9a2dabedfc44554e60ef72229d4bc4161919eedf750b9cf607781d5f37d41ed855809aac75fbc000e8ca6ca28152577c9a821c1d2f3442f7f0d544c44ca06c9b0a5917f5437a50e9de76e0e0d7059b4f2f40dc6b7709eea9f46f68b0b2d2893c3d60d8b9e1ab620c84b0d6a14cc10b90d2e0b130598d2d78473c1f7d4025bf0bb99dc14d2510dd700a1408908713435361541e9e694bfe2940e99aa28e5079da6445623814842e7f4127d9f2a915d2e8177cea0a92c31089b8273c33d4be0d890e4775c95728d967bcf2a5010c241061ee61397dbe902ad7548eaaed4f2af4295dbd7042e5cde338a3dba02258bbd2fb878833f13666af078301b7220712f20a26d3dd821651973233527b02813e82b7163aee3819282094990aa86cb80d668150a584c9111bd826561a01e1c85d32783184f7bbc644d389647f3148855c271b458815c6e2063abf50b744b0a4a8dd41199d6e82f657b02fd1028b32181177211b08c4522a4785fc47dd77715eed6e40183037f0ca865d85ac33d512db20c441ffbf693edd8845ca8c7c95318dcc392300173c23fc5853af578a09cbc2f851583831b4c3d87d2ba5ff9be0d17182c06bb016e95cd80b60299cec311b70dfb571c666f6c1347cdcfcb9285a90a0d97c1ccf8cf874be055ce2d499785e81f943c85a90e989b26eccfdd30c82419270a57c371a1674acd8f9e47490d0f753729b1debc574ea16c475f4349779d17c3e729c902cc154d2e9211714aa500379e635561d0673b6e949ce7eac0229a28d9fde3d8648c89855f17d44a1978dba806349f09456197077af0ce342181b7052a38a8d23be7b0ff13685013627ee04bbd6fb03f8757bd500f6c369861f03c2930154611f68392998a2c803f555e238d0407c089d9373630a37967ff17cdb51d34b690efeb4fe6c157e086829d9153769364f0a623fab796018b219bd1edf6249e383c04646429c623c799adf8fce2c16936493901ac54f3e075c04526e13b1538c57314d6a770c80d2d375fb35d65c22a4bb70a94a8f6cce1d23c45a215d503065ee6286c038a2e40a43ed60989810a010a3cbb77ed75e77b675c81a4755a21c4dd1d8b458ec6116d30e88e475281d4339038aeb626f7968b1c9a1698645d0dcd51024be983d449d70d2c541228c3041fa15259ba3ad1893f53f63e00632c2955e0c44051de916af3d2abb15e8fff6eb3d90c894bb3b19e8693fa233f0e750c39cc2247d184cf8a46d0e9a5f1ec993d714973dcfc634091a32c6bd0200cb1216431561a192ac6a10287aa40af949a8987ec7eb5900a1a66bb65e1378fd205170fcbfdb3f0ab60f3e57f9d6c154b6ebe909c5a711ea66dc032c6dc4cd9299114fac8996e6ac725eb08f2207af95d004c8bd8d5a3f9112fa4eb79d1369e79b126868d6981faacef369deb0061f5f7640d68c6e272aa4b6d18dfa804909a54b82faa90a14b05f2f21d4f710db4a70ef9f5e99ccf0e96b2a4102caad3ade72c5c128c118d53b4b26cf961ffa075611e998e58006155d5b7d398d6d4686174f4830b5a45807d41534c08f3f9bf789359b1cc6694685e71dd3f46b9393f93874dae00b105d246a20a0547c8fb37875d51da98553f2b0f91d694cbc4e9ddc98055f80931ab3124322836f81b7ab2a31be0cbf073756b1bb08cef2901aea97fe86ee60a1d091c749d92a2ddb7d3c480384413887f012904dbce3a46b50ceda64c79fd18e5772190ed76f921a361bf3a2d199d351a7790eda5486878e7486d7336a27d1bb4baa21c53138e4e3c8b8dcff2b83a2fd0bd0e57588541978b474ab28431751245692b5533a1f197fbd79deb8767f07fbb6f4c2543b1acb14d43af59bdccd112f61370aa27276e455916cd2587d8bf00f70e69c545716913004628cab6e8a30b086707c508fd0ec3542cd65d54a75b208a8ce6ee070f8564686b31ccb085140bf3c4f31574677aa8f085e83a710aa2b89618a4d73250d0821bc975f314902b0cdf22de65dfd1e68e8cdefa178d6dea50a1a462c05d921b9fcf27ba19789b420dca80c9b64b3c527429380bf4a9d131e8ad3020a988d366bd8285fe3fdca659066f916f32efe8f347466f7d0bc6b6f52850d231602ec90dcfe793dd0cbc4da113afec0a7aab5af0055711241046d83b5593fd4d350b5ef367e3db8cdc2e582b211e94ac7d570133b3eb6c01bacd6082bc86be79e1b3b10a6510e3e64f327aee24f36759f227df25b5db6b849d32e7575fd4a153a12e3b0ad83a0e09533cf5191b31f4c7b04753dc1816dd593e0b502b10d28c8e0a768877576fffc34019cac51d4a8858d057219b551b87467fd09c099bf5d4ffe37c120057e67f87af05aea31567ed4ab1be212056753484ade292838831ae66aa4e11c1ec56af2306968ca92695cc71e80adf71059ee49ed302fff3bc3ea6db0b8ddbfa6f3f4e77f73f66881f879795b354f2ba2246b7fb1735b6aaa4859dae125a3a760bee354df575f4800a737739ca37d57120965410242d5756f2e1e4dd802859670edb4c75fd6974f0213620ea49e3264ac5f04bb12cbc45be51daa9302a98f82edc42f68aa17cdc6c1eb64503988783516732f7720ef290fba14e3e0b0f3f3b368c073d0e3a495b87173d5881cecdb4dc543738cbc315af24e3c9cc9386d772eded5f6572a58028ee213dd79fc591c94af9f3de7b28ed0c777d7899abe65da499f72256d4db4ad7022b3e56bdbc55ddb99fb0842a8ec469ca172766c445e3d64600e548371115851604da8768d1e851fe8d1ce423731a6ebf88a24b942bb09760c6c6440556e033290ea7220d0fe3fe72791b7f8d7647aff87f0028d792baaa73b6e95a8afbdb91fe11ac1f75738cf8660f02e78dfef904c335b543dcb2d1bc7ac379eeb29c310a840b1e884857bb4951a2426d33ff6ec0314d83112e327a71198c768af2ebe6ca0a1eba8159117e1b4432c886bafe8c302083839cca8d20d40564f5b82286ea23be";
  const public_inputs = [
    "0x000000000000000000000000000000000000000000000000000000000000052b",
    "0x22a03584a33f4906bacbe68ca86905f0f6e16b81114bbbe0315c7d359544a45c",
  ];
  console.log("ðŸ‘‹ Initial greeting:", await yourContract.verify(hex_proof, public_inputs));
};

export default deployYourContract;

// Tags are useful if you have multiple deploy files and only want to run one of them.
// e.g. yarn deploy --tags YourContract
deployYourContract.tags = ["UltraVerifier"];
