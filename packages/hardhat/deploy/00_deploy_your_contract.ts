import { HardhatRuntimeEnvironment } from "hardhat/types";
import { DeployFunction } from "hardhat-deploy/types";
import { Contract } from "ethers";

/**
 * Deploys a contract named "YourContract" using the deployer account and
 * constructor arguments set to the deployer address
 *
 * @param hre HardhatRuntimeEnvironment object.
 */
const deployYourContract: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
  /*
    On localhost, the deployer account is the one that comes with Hardhat, which is already funded.

    When deploying to live networks (e.g `yarn deploy --network sepolia`), the deployer account
    should have sufficient balance to pay for the gas fees for contract creation.

    You can generate a random account with `yarn generate` or `yarn account:import` to import your
    existing PK which will fill DEPLOYER_PRIVATE_KEY_ENCRYPTED in the .env file (then used on hardhat.config.ts)
    You can run the `yarn account` command to check your balance in every network.
  */
  const { deployer } = await hre.getNamedAccounts();
  const { deploy } = hre.deployments;

  await deploy("UltraVerifier", {
    from: deployer,
    // Contract constructor arguments
    args: [],
    log: true,
    // autoMine: can be passed to the deploy function to make the deployment process faster on local networks by
    // automatically mining the contract deployment transaction. There is no effect on live networks.
    autoMine: true,
  });

  // Get the deployed contract to interact with it after deploying.
  const yourContract = await hre.ethers.getContract<Contract>("UltraVerifier", deployer);
  const hex_proof =
    "0x07244685754303a36e4163c5fde291adde4214bbdd271bda04513d2ea736b40d1b7ec11cbf0cb8456f1d3305ea619a5db268fd35c575c2285eeba25c3edbcd5400c073a9f52b874bcec0d84e6cdf8e425c35578618f8d849410b9bdd7b54b8ee2048bda760c6b41bf8d3cf0329b1b1b90d1dd153625fdef7ba6f3ee248b994670a0f58f557be2effaa5d97e40196319684c06f884ed2e6f1767bfbb5fd3a7e422806ed95f3ee1cc0c3a05b29cbc70684a069dbb88b81922fffeee1b4dc06ded72ffa9b49d7e1ef4e95aabbc2f7631c1820db39b5ac43b458dc7519ae722ce39a2df984752b7f80febf3a151b8d3b9c607a3812a1693226012c616bf223bbf8be29e8002b402c5a82a62fea96c1c52cc9bc0246229f99fdc164be422b4cb8fbd118ba389fa4bc7eb4ddd4376ed2d9ea3c199d044685f800614267d840622742ed2de14b99091bf21165eb8b23159ce5e733a3a46c1f3e5cd295ecf8be181791ab01033da59c9a7f47c7937198832f769f73c3ef6192a844db592b9d55ce03ceec273d6d099138b842cda57278beb109d3900b0fd383972fa0c8952daaf6432b790653c9022c482c9bcd24f40868d8189404a39d8af29f8107854177be5662e1bc04bd6a2289f3082fefd4e26867470ac82f976554185348c81271a584abb3a5a6157f34a61ecd79577e34dfd069437e463fe938dea4f245bf6d630b72b256922e01ea1f8c116e193dfc246e5a8f9e037965277876a7df67a736b7c2fa254fb8ec123f302a07d0e77178c8b652dafaba0cad3bd53edf7922daead7254bef3f9aec271480b7fe6593af87d7a9b2813ffc0432ad39241aeb3732d9c1c332f34e59a71d1875aede3fcb15af032d6d3d8b11538409e1fb0491e1e0edb9fe772b42b572294257c1ba195f5eac95fa6f61571780ccd240c45a29819ed1d785bb71981dcd11fb036bb5bd44498e5c9071c3e6363da1bbc4a5f4634e36c31da21f0acc119d1184fd18010d272026fe6f7d415bad3ce10258b960266ca2e28d199d8c49abf6069b11a628d1632a45842345733192f5bd71c6ca32705d66b41c83ae9c2e3cec11f6d4065281c5447b7c9b2585e55e6585396285ed41ce9ffcf1e7ab276cbbe22898aae40c501563f735a827ed79313e8231f81a243c9b8907bb561a8fe192291c9cc17f0b030bb65ee23a807bb51d19ecd07a03fae578c22f64ece5f7ccaa1e1f5da03c6e0e8983ba04709830587e1f11e321e82b67ddea489d171954e51730269ee36ba78470a9d9bc57210661e0962403ddff14e1ce74f9e1ab33862400e71b81c9dfb4a611b06b467e2429c07cde4002b41a8f450db60b8457d1415a81ef0d13b4abc9b4eeff0e75ac2acbcf8c607d597895e638bbd31b81fa20b53799c01e9a8c0375f71b41d317929216c2b2a555400751a9e8a5445f1bb97c639cfdb725c911bb957c85e9df538721e98bd104cfe060a5a08d520d44b056aaf9b5bb2f1441e063bd7f66286dce40a346ed561113e8363d325dd85b6ac4cb10563c099e16f61855a827eb8069e09cd0f0f4b0fb5639c8c473f012fce74e712f4ed165ac2213e25588873a293656525bc04395b519a2cef9ef031d8b8a5464ba7eab3f6015a57e5cdb7ce301f422ea98044bcaed55b52635fdc3cde2c98428d1661a39ed2cefa288fbe4bd1d43399eaa7f7cf16e0a6b1000ab6e65807d5e5e193c42a8a52c972af19829d99c0450f45c7f494d89543d60c64a007dfecfeacef35d7c864f28fabba360bf5cf80e1b84590623ba49d0be824274d8b21cf8ff733b99c068b1000cc9e86068f0850da16d041685fb6c81094457ea72172f7f49d8b8c9a5c63a1f42c8801e4b19d599413078b592811e262d0303e96413e608200ec6b76529da249de133b341f2236cefc3dac22ec1ff5aaa846e7bbe68b50953e8014552b6bb2c3eb35a346ef61ac5684a0e7f15a9a49e0fb18be892967d22773fcd7eb663f92be63bc2d0b41299867f9fc07ee205bfe7e202518724aefb7503b0a79ff041a32b8dc42b6cf92f184796f5727eae61db31b4531725b6c779c7902181c12a1f4d2b354c94093e4b9708ae4b247e7abdf67b86a3dcc448dff81a1c925be263fcf72df9094f271567a0fff39d948017dd1c2cf41dafcfb81c0585b90b8ad8950fa722f8e6584938ece7897f97a97e08d07c3895001b1c9db1c4054a16224005d15f2c9d02407d604461a7619975c57a464a09d209e4afce5a5bef3f47b5fa398cb6229cf4079eaac79a60fd2763527b176f5ccd102d34d15d12b3c341879be380260ef3ef3448dfcee18b911ba9c5357f5a2def480d1fa348b430ad1b7635b3f5eb01a8e2266eb6a96ded9cca9643bd235aa150a6d5e6b57a20c1c2feeedd2fc86b28dcf0783e25767c09f509112842b24e1eefafb675fdf3d90fabe6e121fa860b26139dd7be0d6d79953c2c5f4306b5ddda31abaf5426e77f0371821d10099c1e136839653d419af347304d1a7512b042f26f369c9900cf42700e467e3900109c12b700a0ca0644a28119fe91736b8ad1c99d490f5ff7a741285c81383e7943eb0ac9cbc9447e46b7d9574ef563847a7ba55822003b3d0696fe40ef47074a7c29277e2a6c289259670f8ae8375838f978c9d33772ff94c4b4b589d6cb52ac2cca0712bfe95fc290865c11acb64110e08a3638229dc4eeef437ee27f809875e96d23e428552b1a64a9e4974e6fe75dbc216785c25531af04dddbb92eb6f12a678c1051424e154098a3b4ccaa730c293f5b709f79c424b5a9e6f4ade85959dee5aa2d22aab9e0986cc73d524c2cb2761af2a1ed197b9175bf815184978fb29363c90f911c9c8ab209aff88d846dcdf1008c49e8d75abb2a2c2afd882ba9ae7b672a2aea09d73f127852d95f55b7c49325c3fc374233610e0ae8b325bc330c3ec9c11d4ec38845c514c9d3c04f7eb2a835c457cc41b9c6239a637dd78b08b602f24718d594ea86bdac1ea3fde92ada8caa6b40e0af3389e051c06c7be8d659d075c4";
  const public_inputs = [
    "0x000000000000000000000000000000000000000000000000000000000000052b",
    "0x22a03584a33f4906bacbe68ca86905f0f6e16b81114bbbe0315c7d359544a45c",
  ];
  console.log("ðŸ‘‹ Initial greeting:", await yourContract.verify(hex_proof, public_inputs));
};

export default deployYourContract;

// Tags are useful if you have multiple deploy files and only want to run one of them.
// e.g. yarn deploy --tags YourContract
deployYourContract.tags = ["YourContract"];
