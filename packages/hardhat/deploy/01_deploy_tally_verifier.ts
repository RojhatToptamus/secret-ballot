// yarn deploy --tags TallyUltraVerifier
import { HardhatRuntimeEnvironment } from "hardhat/types";
import { DeployFunction } from "hardhat-deploy/types";
import { Contract } from "ethers";

/**
 * Deploys a contract named "YourContract" using the deployer account and
 * constructor arguments set to the deployer address
 *
 * @param hre HardhatRuntimeEnvironment object.
 */
const deployYourContract: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
  /*
    On localhost, the deployer account is the one that comes with Hardhat, which is already funded.

    When deploying to live networks (e.g `yarn deploy --network sepolia`), the deployer account
    should have sufficient balance to pay for the gas fees for contract creation.

    You can generate a random account with `yarn generate` or `yarn account:import` to import your
    existing PK which will fill DEPLOYER_PRIVATE_KEY_ENCRYPTED in the .env file (then used on hardhat.config.ts)
    You can run the `yarn account` command to check your balance in every network.
  */
  const { deployer } = await hre.getNamedAccounts();
  const { deploy } = hre.deployments;

  await deploy("TallyUltraVerifier", {
    from: deployer,
    // Contract constructor arguments
    args: [],
    log: true,
    // autoMine: can be passed to the deploy function to make the deployment process faster on local networks by
    // automatically mining the contract deployment transaction. There is no effect on live networks.
    autoMine: true,
  });

  // Get the deployed contract to interact with it after deploying.
  const yourContract = await hre.ethers.getContract<Contract>("TallyUltraVerifier", deployer);
  const hex_proof =
    "0x281bfc78675c73397c6b9173f16706262842b795305772bfe3a0b973514eeffa0939937ac9d4155dfb7b4e4e16130d26a7d455268fc5c39522defbd8d2a96f33203b9e2ee89f73a85ca52f3f7a4fb1dd02d5eb8e0cc669e14e6c2b0132f681d915ae4d166d0469ff23fbd4791bc17f7dafaeca7c76f0f751cb9d71c24d4998312e768589996aca98a5a59643118d2b01a775f2bb764f49fe0f1ecdf3bb3feb9d27d0216f840c625306721c46968e8c1401d6828f487d43e159a081a55e8007d4092da665d7912deadafbbe05ffe853b44f61dea7fb2239ccb6c3f41851b310c2177ec037182e05c8a6d58d3230a8afc12c84f584badf590200a4749748307c1e1fdae3c297e989e57a2e31c8e8c92d28e05d0092f07c461fe64cd739c454e3b50ab6b2de692eaeae168844ef29ad0082945853b52b596a862d09c2d2f4c5095e1509a662ba5bcf896d67d6baf8dfa0ccbbffb7e13f81d8e05877727797a7d2dc1dedbdb2f5326fb2e4b1dec0251b77a7691671018ea04e2404a5eb4ab1f2e7582e827990db584f1d536be53ace6b18e989d3afabfb2bb25f93d54e8df671383311994a8c519dfbccaf4b28f27b01bae1820c98c23d3cf9ac5feb81913db7f39517d09c3cad7ae376c8e976a101da66c99f17c05f98d6d8fca30e36767ad73e182eff64bc240ce8f2dce353152261954821d946b750c73076374feace39f277c1214481dafbd0ab2ff958f3ecb265ca9fcffaae56fbdd0e25e9581ff7c181609205e8609c6b21fc55ae3deaca4e7e5b7e6ad813e98330711f2e7e2ca895deb60d1cc2ab9ca15db4881d3b231157350ee4110149579b2b194e2c28507dd6770ff10f5ac1f1c3d43549b5895576ae87168eab95270f45214ad89f132f566e6185fa1ca4f5716e251a1d4305de82e11001b72c19b4cd89295b559e1ad5199a4b6e4321c209752669520317405d94601998450dbd60a4bd14eb8c10eacf8c470c58aa0f53cdad081200162e8f579e628c222698e04ea3f2b1ed38c2ae2a8776eefff70aeffb5f84bbe100ed9dd642f6977c862f74eddb4d1d3c226525b7b5c4a65bdf2c0d68d93e4da5f142d5fed07f797de8ffe9fba4481460758e44c72c3e9d0fdb18d02fb49ff72e416c0b4b36df30154a0face02fa496114e10029b0bef3a34fb23fa16587461541bb5eb79cc01fada384bbc35e58b615ba1b6df9bf5e13e90d82b05c05b1718dbf367b27d4d04dcfd35cbe1b848069db09ef27c6aa4d571e4be223667d0edf4c2be5219bc9d0497fae5b51350890a06148e91442746fc7535e0235ca2c6fb75d4c35db3e660aa882fe207f10118ef72e91e010c02b59c789e40145053bcdc67728c85cc7b4cf5a27dd1c74bb2e562f174f55b0a6b7ae38e92f414dcdcedf6e6c1502fa243c371092eb533df0beb24680a5fe5a377dbdb2b943a266a14af9b7d3bcadfd9a026ecbe9c05e55195dab844b4ebddbfd68e28add28a1ac290a38be7a53bc16d7308d64b7098c97ccc5272a83734b48deda25650e578170537e36b2fa5a4abd50be88aa12103591a30b298aebe9a7521f6530c45923602329fcfabcce3e92200f3f559e294246fdbf3795bf781bc0cba24b1053b6b0309c8201ea8648ddb3dfbdcadbd075c0500d023ea8a8646081d196436392de82b2b3375671660c31a053d71a3761ca44d8766d711286f30ac7518fca370433e532aae92e5e87f13654021f607f4f8f8b25db8bbbed3815d7bfa04e3be96b05e2827c89f79643272f6b1e44099ecaaa91f97afa1a9df3d1f303e1ac4a2c2b75f251531f266ab4bb5f591a2570f5f8526a52f8fa4edd69acd4ba6d64add6cb37a3c00dceb5631130bce5b7e5691cb6ff97d6f56fb90b35bfe4c91cf6d822c14e46b2537107318e1c5879821962e5785fa0e17e9470265a11da5af8f0af1a8620cd92a29b064ba9d63b07b067a6c73d54d17340aa06c7e938a4b7ef0cad9bd1d7dfd29a4cde38cbbb3fbb5eafed0f2b1a17c0a5c851a29a5b71b03dcb1f4e38a9dd2291feb625eda0446f0cf8335718df5e0e0ae69c7d4b7e3ea88c8991009f7bda7289b08e130f854922bb40799f06a4a45b7004e757fca10ba0db4802b3064dd7c2cc21ceaa005d238548fe475f987a71f047129082738aa3de6554751fcfbded411df480303adcb1a23c18eb12002c589a37f37566243440e0c9669e090dfc804305ba7c700230910e2b22f4d793ed35f71d3af399891abd041e32675a86ab2570e7fc294d1b0a60592bc1972a9d30ccbb16841fbab67a486e39e540ffd41d42f0f3c8ee43dbd9545db381ecd58512a7731fb25c05250518137490b37f60169540a4068c85f35e3ed2370689bc23c955e4cfd1333780ae06e5b58a8bccef5dd4b18e3ced8dfbb2f6c7b4bf1fad108207c504accc66cbda935fc9f0c320ed7806c25917688da3b645d545437200a8715549a39d32f1fe0e9cec5da836b0688790a18b592c0d8e30654c77773f775b5128ca2c85e6ab9d5499862f6000807dd0b4e0f7c2f35c68fa64170cb60dfbb792ef694a2a78e7365002917377a402a40948806bdb336617593a9122f9846fb1edac26fea0d40dcd75853b1bce13fe9cde0bf0f3c47354e02a818f0a85f2b8443c8c706faa1d289187f809414f114c9079fe02f89f1b3006629dfb196924af811d26daad89d77c770e0b2c185c2e2412d260b174598143d11ba99ff89a07c1687db15cc4c63177bb8c71794b7c3decff0e9362f658ce85aeeeb7e05ccf463b67f3c1b15f410ffa9ba1e0dabcbba6f4eb4ac6217213349979a7c3853c00294d4f544c33767d69f5e0204727efdbb6bdd786f8d09a49a93e318524aa3e351bc39381f25206b80b3d3045910249e55f59322c8752fd4310f0ffee0708a0c0b1de72d0e00c8cebc99ff34efe9dbe689ae7858064e1ddaf82dec7ec46bdc22dd3297bccdbee981e4b69d0fa64ce25d6c782346443a20b681aba5ba2bd04064fce55265e2f05857b3c30dec5bb99d3df75c0485f983";
  const public_inputs = [
    "0x1e52f09006282565c0c70e93e6eac935a164999a98121e0079ac581d7dbb4def",
    "0x0000000000000000000000000000000000000000000000000000000000000001",
  ];
  console.log("Verifying proof", await yourContract.verify(hex_proof, public_inputs));
};

export default deployYourContract;

// Tags are useful if you have multiple deploy files and only want to run one of them.
// e.g. yarn deploy --tags YourContract
deployYourContract.tags = ["TallyUltraVerifier"];
